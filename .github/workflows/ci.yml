name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  MONGODB_VERSION: '6.0'

jobs:
  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin123
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh admin --username admin --password admin123 --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Create test environment file
      working-directory: ./backend
      run: |
        cat > .env.test << EOF
        NODE_ENV=test
        PORT=5001
        MONGODB_URI=mongodb://admin:admin123@localhost:27017/studentportal_test?authSource=admin
        JWT_SECRET=test_jwt_secret_key_for_ci_cd_pipeline
        JWT_REFRESH_SECRET=test_refresh_secret_key_for_ci_cd_pipeline
        REDIS_URL=redis://localhost:6379
        LOG_LEVEL=error
        RATE_LIMIT_WINDOW_MS=900000
        RATE_LIMIT_MAX_REQUESTS=1000
        EOF

    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint

    - name: Run backend type checking
      working-directory: ./backend
      run: npm run type-check

    - name: Run backend unit tests
      working-directory: ./backend
      run: npm test -- --coverage --testTimeout=30000
      env:
        NODE_ENV: test

    - name: Upload backend coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Frontend Student Testing
  frontend-student-test:
    name: Frontend Student Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend-student/package-lock.json

    - name: Install frontend-student dependencies
      working-directory: ./frontend-student
      run: npm ci

    - name: Create test environment file
      working-directory: ./frontend-student
      run: |
        cat > .env.test << EOF
        VITE_API_URL=http://localhost:5001/api
        VITE_ADMIN_URL=http://localhost:3001
        VITE_APP_NAME=Student Portal
        EOF

    - name: Run frontend-student linting
      working-directory: ./frontend-student
      run: npm run lint

    - name: Run frontend-student type checking
      working-directory: ./frontend-student
      run: npm run type-check

    - name: Run frontend-student unit tests
      working-directory: ./frontend-student
      run: npm test -- --coverage

    - name: Build frontend-student
      working-directory: ./frontend-student
      run: npm run build

    - name: Upload frontend-student coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend-student/coverage/lcov.info
        flags: frontend-student
        name: frontend-student-coverage

  # Frontend Admin Testing
  frontend-admin-test:
    name: Frontend Admin Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend-admin/package-lock.json

    - name: Install frontend-admin dependencies
      working-directory: ./frontend-admin
      run: npm ci

    - name: Create test environment file
      working-directory: ./frontend-admin
      run: |
        cat > .env.test << EOF
        VITE_API_URL=http://localhost:5001/api
        VITE_STUDENT_URL=http://localhost:3000
        VITE_APP_NAME=Admin Panel
        EOF

    - name: Run frontend-admin linting
      working-directory: ./frontend-admin
      run: npm run lint

    - name: Run frontend-admin type checking
      working-directory: ./frontend-admin
      run: npm run type-check

    - name: Run frontend-admin unit tests
      working-directory: ./frontend-admin
      run: npm test -- --coverage

    - name: Build frontend-admin
      working-directory: ./frontend-admin
      run: npm run build

    - name: Upload frontend-admin coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend-admin/coverage/lcov.info
        flags: frontend-admin
        name: frontend-admin-coverage

  # End-to-End Testing
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-student-test, frontend-admin-test]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && !contains(github.head_ref, 'dependabot'))

    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin123
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh admin --username admin --password admin123 --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install all dependencies
      run: |
        cd backend && npm ci
        cd ../frontend-student && npm ci
        cd ../frontend-admin && npm ci

    - name: Create environment files
      run: |
        # Backend environment
        cat > backend/.env << EOF
        NODE_ENV=test
        PORT=5000
        MONGODB_URI=mongodb://admin:admin123@localhost:27017/studentportal_e2e?authSource=admin
        JWT_SECRET=e2e_test_jwt_secret_key
        JWT_REFRESH_SECRET=e2e_test_refresh_secret_key
        LOG_LEVEL=error
        EOF
        
        # Frontend Student environment
        cat > frontend-student/.env << EOF
        VITE_API_URL=http://localhost:5000/api
        VITE_ADMIN_URL=http://localhost:3001
        EOF
        
        # Frontend Admin environment
        cat > frontend-admin/.env << EOF
        VITE_API_URL=http://localhost:5000/api
        VITE_STUDENT_URL=http://localhost:3000
        EOF

    - name: Seed test database
      working-directory: ./backend
      run: npm run seed:test

    - name: Build applications
      run: |
        cd backend && npm run build
        cd ../frontend-student && npm run build
        cd ../frontend-admin && npm run build

    - name: Start backend server
      working-directory: ./backend
      run: npm start &
      env:
        NODE_ENV: test

    - name: Wait for backend to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:5000/api/health; do sleep 2; done'

    - name: Start frontend applications
      run: |
        cd frontend-student && npm run preview -- --port 3000 &
        cd ../frontend-admin && npm run preview -- --port 3001 &

    - name: Wait for frontends to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:3001; do sleep 2; done'

    - name: Install Playwright
      working-directory: ./e2e
      run: |
        npm ci
        npx playwright install --with-deps

    - name: Run E2E tests
      working-directory: ./e2e
      run: npx playwright test

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: e2e/playwright-report/
        retention-days: 30

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit for backend
      working-directory: ./backend
      run: |
        npm audit --audit-level moderate
        npm audit fix --dry-run

    - name: Run npm audit for frontend-student
      working-directory: ./frontend-student
      run: |
        npm audit --audit-level moderate
        npm audit fix --dry-run

    - name: Run npm audit for frontend-admin
      working-directory: ./frontend-admin
      run: |
        npm audit --audit-level moderate
        npm audit fix --dry-run

  # Docker Build and Push
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-student-test, frontend-admin-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/student-portal-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/student-portal-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend-student image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend-student
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/student-portal-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/student-portal-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend-admin image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend-admin
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/student-portal-admin:latest
          ${{ secrets.DOCKER_USERNAME }}/student-portal-admin:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-test, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could be deploying to AWS, GCP, Azure, etc.

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-test, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # This should include health checks and rollback strategies

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-student-test, frontend-admin-test, e2e-test]
    if: failure()

    steps:
    - name: Send notification
      run: |
        echo "Pipeline failed. Sending notification..."
        # Add notification logic here (Slack, email, etc.)

# Workflow completion notification
  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-student-test, frontend-admin-test, e2e-test, security-scan]
    if: always()

    steps:
    - name: Generate summary
      run: |
        echo "## Workflow Summary 📊" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Student Tests | ${{ needs.frontend-student-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Admin Tests | ${{ needs.frontend-admin-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY